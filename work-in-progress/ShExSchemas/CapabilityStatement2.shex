PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


start=@<CapabilityStatement2> AND {fhir:nodeRole [fhir:treeRoot]}


# A statement of system capabilities
<CapabilityStatement2> EXTENDS @<CanonicalResource> CLOSED {   

    a [fhir:CapabilityStatement2];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:url @<CapabilityStatement2.url>?;  # Canonical identifier for this 
                                            # capability statement2, represented 
                                            # as a URI (globally unique) 
    fhir:version @<CapabilityStatement2.version>?;  # Business version of the capability 
                                            # statement2 
    fhir:name @<CapabilityStatement2.name>?;  # Name for this capability 
                                            # statement2 (computer friendly) 
    fhir:title @<CapabilityStatement2.title>?;  # Name for this capability 
                                            # statement2 (human friendly) 
    fhir:status @<CapabilityStatement2.status>;  # draft | active | retired | unknown
    fhir:experimental @<CapabilityStatement2.experimental>?;  # For testing purposes, not real 
                                            # usage 
    fhir:date @<CapabilityStatement2.date>;  # Date last changed
    fhir:publisher @<CapabilityStatement2.publisher>?;  # Name of the publisher 
                                            # (organization or individual) 
    fhir:contact @<OneOrMore_CapabilityStatement2.contact>?;  # Contact details for the publisher
    fhir:description @<CapabilityStatement2.description>?;  # Natural language description of 
                                            # the capability statement2 
    fhir:useContext @<OneOrMore_CapabilityStatement2.useContext>?;  # The context that the content is 
                                            # intended to support 
    fhir:jurisdiction @<OneOrMore_CapabilityStatement2.jurisdiction>?;  # Intended jurisdiction for 
                                            # capability statement2 (if 
                                            # applicable) 
    fhir:purpose @<CapabilityStatement2.purpose>?;  # Why this capability statement2 is 
                                            # defined 
    fhir:copyright @<CapabilityStatement2.copyright>?;  # Use and/or publishing restrictions
    fhir:kind @<CapabilityStatement2.kind>;  # instance | capability | 
                                            # requirements 
    fhir:instantiates @<OneOrMore_CapabilityStatement2.instantiates>?;  # Canonical URL of another 
                                            # capability statement this 
                                            # implements 
    fhir:imports @<OneOrMore_CapabilityStatement2.imports>?;  # Canonical URL of another 
                                            # capability statement this adds to 
    fhir:software @<CapabilityStatement2.software>?;  # Software that is covered by this 
                                            # capability statement 
    fhir:implementation @<CapabilityStatement2.implementation>?;  # If this describes a specific 
                                            # instance 
    fhir:fhirVersion @<CapabilityStatement2.fhirVersion>;  # FHIR Version the system supports
    fhir:format @<OneOrMore_CapabilityStatement2.format>;  # formats supported (xml | json | 
                                            # ttl | mime type) 
    fhir:patchFormat @<OneOrMore_CapabilityStatement2.patchFormat>?;  # Patch formats supported
    fhir:implementationGuide @<OneOrMore_CapabilityStatement2.implementationGuide>?;  # Implementation guides supported
    fhir:rest @<OneOrMore_CapabilityStatement2.rest>?;  # If the endpoint is a RESTful one
} AND (

# Constraint: UniqueKey:cnl-0
# Human readable:Name should be usable as an identifier for the module by machine processing applications such as code generation
# XPath:not(exists(f:name/@value)) or matches(f:name/@value, '[A-Z]([A-Za-z0-9_]){0,254}')
# Constraint:name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')
# ShEx:

{ fhir:name . } AND { fhir:name { fhir:v /'[A-Z]([A-Za-z0-9_]){0,254}'/ }  }

) AND (

# Constraint: UniqueKey:cp2-14
# Human readable:If kind = instance, implementation must be present and software may be present
# XPath:not(f:kind/@value='instance') or exists(f:implementation)
# Constraint:(kind != 'instance') or implementation.exists()
# ShEx:

({ fhir:kind { fhir:v [ . -'instance'] } }) OR { fhir:implementation . }

) AND (

# Constraint: UniqueKey:cp2-2
# Human readable:A Capability Statement SHALL have at least one of description, software, or implementation element.
# XPath:count(f:software | f:implementation | f:description) > 0
# Constraint:(description.count() + software.count() + implementation.count()) > 0
# ShEx:

( count( fhir:description ) SHEX_Plus_SHEX  count( fhir:software ) SHEX_Plus_SHEX  count( fhir:implementation )) { fhir:v MinExclusive 0 } 

) AND (

# Constraint: UniqueKey:cp2-16
# Human readable:If kind = requirements, implementation and software must be absent
# XPath:not(f:kind/@value='instance') or (not(exists(f:implementation)) and not(exists(f:software)))
# Constraint:(kind!='requirements') or (implementation.exists().not() and software.exists().not())
# ShEx:

({ fhir:kind { fhir:v [ . -'requirements'] } }) OR ( NOT { fhir:implementation  . } AND  NOT { fhir:software  . })

) AND (

# Constraint: UniqueKey:cp2-15
# Human readable:If kind = capability, implementation must be absent, software must be present
# XPath: not(f:kind/@value='instance') or (not(exists(f:implementation)) and exists(f:software))
# Constraint:(kind != 'capability') or (implementation.exists().not() and software.exists())
# ShEx:

({ fhir:kind { fhir:v [ . -'capability'] } }) OR ( NOT { fhir:implementation  . } AND { fhir:software . })

) AND (

# Constraint: UniqueKey:cp2-1
# Human readable:A Capability Statement SHALL have at least one of REST, messaging or document element.
# XPath:exists(f:rest)
# Constraint:rest.exists()
# ShEx:

{ fhir:rest . }

) AND (

# Constraint: UniqueKey:cp2-9
# Human readable:A given resource can only be described once per RESTful mode.
# XPath:count(f:resource)=count(distinct-values(f:resource/f:type/@value))
# Constraint:resource.select(type).isDistinct()
# ShEx:

 isDistinct( fhir:resource  SHEX_select_SHEX (fhir:type) )

) AND (

# Constraint: UniqueKey:cp2-12
# Human readable:Search parameter names must be unique in the context of a resource.
# XPath:count(f:searchParam)=count(distinct-values(f:searchParam/f:name/@value))
# Constraint:searchParam.select(name).isDistinct()
# ShEx:

 isDistinct( fhir:searchParam  SHEX_select_SHEX (fhir:name) )

)
 

# Resource served on the REST interface
<CapabilityStatement2.rest.resource> EXTENDS @<BackboneElement> CLOSED {   
    fhir:type @<CapabilityStatement2.rest.resource.type>;  # A resource type that is supported
    fhir:profile @<CapabilityStatement2.rest.resource.profile>?;  # Base System profile for all uses 
                                            # of resource 
    fhir:supportedProfile @<OneOrMore_CapabilityStatement2.rest.resource.supportedProfile>?;  # Profiles for use cases supported
    fhir:documentation @<CapabilityStatement2.rest.resource.documentation>?;  # Additional information about the 
                                            # use of the resource type 
    fhir:feature @<OneOrMore_CapabilityStatement2.rest.feature>?;  # Statement of support for a feature 
                                            # in this context 
    fhir:interaction @<OneOrMore_CapabilityStatement2.rest.resource.interaction>?;  # What operations are supported?
    fhir:searchParam @<OneOrMore_CapabilityStatement2.rest.resource.searchParam>?;  # Search parameters supported by 
                                            # implementation 
    fhir:operation @<OneOrMore_CapabilityStatement2.rest.resource.operation>?;  # Definition of a resource operation
}  

# Definition of a resource operation
<CapabilityStatement2.rest.resource.operation> EXTENDS @<BackboneElement> CLOSED {   
    fhir:name @<CapabilityStatement2.rest.resource.operation.name>;  # Name by which the operation/query 
                                            # is invoked 
    fhir:definition @<CapabilityStatement2.rest.resource.operation.definition>;  # The defined operation/query
    fhir:documentation @<CapabilityStatement2.rest.resource.operation.documentation>?;  # Specific details about operation 
                                            # behavior 
    fhir:feature @<OneOrMore_CapabilityStatement2.rest.feature>?;  # Statement of support for a feature 
                                            # in this context 
}  

# If the endpoint is a RESTful one
<CapabilityStatement2.rest> EXTENDS @<BackboneElement> CLOSED {   
    fhir:mode @<CapabilityStatement2.rest.mode>;  # client | server
    fhir:documentation @<CapabilityStatement2.rest.documentation>?;  # General description of 
                                            # implementation 
    fhir:feature @<OneOrMore_CapabilityStatement2.rest.feature>?;  # Statement of support for a feature
    fhir:resource @<OneOrMore_CapabilityStatement2.rest.resource>?;  # Resource served on the REST 
                                            # interface 
    fhir:interaction @<OneOrMore_CapabilityStatement2.rest.interaction>?;  # What operations are supported?
    fhir:searchParam @<OneOrMore_CapabilityStatement2.rest.resource.searchParam>?;  # Search parameters for searching 
                                            # all resources 
    fhir:operation @<OneOrMore_CapabilityStatement2.rest.resource.operation>?;  # Definition of a system level 
                                            # operation 
    fhir:compartment @<OneOrMore_CapabilityStatement2.rest.compartment>?;  # Compartments served/used by system
} AND (

# Constraint: UniqueKey:cnl-0
# Human readable:Name should be usable as an identifier for the module by machine processing applications such as code generation
# XPath:not(exists(f:name/@value)) or matches(f:name/@value, '[A-Z]([A-Za-z0-9_]){0,254}')
# Constraint:name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){0,254}')
# ShEx:

{ fhir:name . } AND { fhir:name { fhir:v /'[A-Z]([A-Za-z0-9_]){0,254}'/ }  }

) AND (

# Constraint: UniqueKey:cp2-14
# Human readable:If kind = instance, implementation must be present and software may be present
# XPath:not(f:kind/@value='instance') or exists(f:implementation)
# Constraint:(kind != 'instance') or implementation.exists()
# ShEx:

({ fhir:kind { fhir:v [ . -'instance'] } }) OR { fhir:implementation . }

) AND (

# Constraint: UniqueKey:cp2-2
# Human readable:A Capability Statement SHALL have at least one of description, software, or implementation element.
# XPath:count(f:software | f:implementation | f:description) > 0
# Constraint:(description.count() + software.count() + implementation.count()) > 0
# ShEx:

( count( fhir:description ) SHEX_Plus_SHEX  count( fhir:software ) SHEX_Plus_SHEX  count( fhir:implementation )) { fhir:v MinExclusive 0 } 

) AND (

# Constraint: UniqueKey:cp2-16
# Human readable:If kind = requirements, implementation and software must be absent
# XPath:not(f:kind/@value='instance') or (not(exists(f:implementation)) and not(exists(f:software)))
# Constraint:(kind!='requirements') or (implementation.exists().not() and software.exists().not())
# ShEx:

({ fhir:kind { fhir:v [ . -'requirements'] } }) OR ( NOT { fhir:implementation  . } AND  NOT { fhir:software  . })

) AND (

# Constraint: UniqueKey:cp2-15
# Human readable:If kind = capability, implementation must be absent, software must be present
# XPath: not(f:kind/@value='instance') or (not(exists(f:implementation)) and exists(f:software))
# Constraint:(kind != 'capability') or (implementation.exists().not() and software.exists())
# ShEx:

({ fhir:kind { fhir:v [ . -'capability'] } }) OR ( NOT { fhir:implementation  . } AND { fhir:software . })

) AND (

# Constraint: UniqueKey:cp2-1
# Human readable:A Capability Statement SHALL have at least one of REST, messaging or document element.
# XPath:exists(f:rest)
# Constraint:rest.exists()
# ShEx:

{ fhir:rest . }

) AND (

# Constraint: UniqueKey:cp2-9
# Human readable:A given resource can only be described once per RESTful mode.
# XPath:count(f:resource)=count(distinct-values(f:resource/f:type/@value))
# Constraint:resource.select(type).isDistinct()
# ShEx:

 isDistinct( fhir:resource  SHEX_select_SHEX (fhir:type) )

) AND (

# Constraint: UniqueKey:cp2-12
# Human readable:Search parameter names must be unique in the context of a resource.
# XPath:count(f:searchParam)=count(distinct-values(f:searchParam/f:name/@value))
# Constraint:searchParam.select(name).isDistinct()
# ShEx:

 isDistinct( fhir:searchParam  SHEX_select_SHEX (fhir:name) )

)
 

# If this describes a specific instance
<CapabilityStatement2.implementation> EXTENDS @<BackboneElement> CLOSED {   
    fhir:description @<CapabilityStatement2.implementation.description>;  # Describes this specific instance
    fhir:url @<CapabilityStatement2.implementation.url>?;  # Base URL for the installation
    fhir:custodian @<CapabilityStatement2.implementation.custodian> AND {fhir:link 
    			@<Organization> }?;  # Organization that manages the data
}  

# Statement of support for a feature
<CapabilityStatement2.rest.feature> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<CapabilityStatement2.rest.feature.code>;  # Feature that is being reported
    fhir:value @<CapabilityStatement2.rest.feature.value>;  # Value of the feature (true, false, 
                                            # or a code) 
}  

# What operations are supported?
<CapabilityStatement2.rest.resource.interaction> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<CapabilityStatement2.rest.resource.interaction.code>;  # read | vread | update | patch | 
                                            # delete | history-instance | 
                                            # history-type | create | 
                                            # search-type 
    fhir:documentation @<CapabilityStatement2.rest.resource.interaction.documentation>?;  # Anything special about operation 
                                            # behavior 
    fhir:feature @<OneOrMore_CapabilityStatement2.rest.feature>?;  # Statement of support for a feature 
                                            # in this context 
}  

# What operations are supported?
<CapabilityStatement2.rest.interaction> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<CapabilityStatement2.rest.interaction.code>;  # transaction | batch | 
                                            # search-system | history-system 
    fhir:documentation @<CapabilityStatement2.rest.interaction.documentation>?;  # Anything special about operation 
                                            # behavior 
    fhir:feature @<OneOrMore_CapabilityStatement2.rest.feature>?;  # Statement of support for a feature 
                                            # in this context 
}  

# Software that is covered by this capability statement
<CapabilityStatement2.software> EXTENDS @<BackboneElement> CLOSED {   
    fhir:name @<CapabilityStatement2.software.name>;  # A name the software is known by
    fhir:version @<CapabilityStatement2.software.version>?;  # Version covered by this statement
    fhir:releaseDate @<CapabilityStatement2.software.releaseDate>?;  # Date this version was released
}  

# Search parameters supported by implementation
<CapabilityStatement2.rest.resource.searchParam> EXTENDS @<BackboneElement> CLOSED {   
    fhir:name @<CapabilityStatement2.rest.resource.searchParam.name>;  # Name of search parameter
    fhir:definition @<CapabilityStatement2.rest.resource.searchParam.definition>?;  # Source of definition for parameter
    fhir:type @<CapabilityStatement2.rest.resource.searchParam.type>;  # number | date | string | token | 
                                            # reference | composite | quantity | 
                                            # uri | special 
    fhir:documentation @<CapabilityStatement2.rest.resource.searchParam.documentation>?;  # Server-specific usage
    fhir:feature @<OneOrMore_CapabilityStatement2.rest.feature>?;  # Statement of support for a feature 
                                            # in this context 
}  

#---------------------- Data Types -------------------

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_CapabilityStatement2.contact> CLOSED {
    rdf:first @<CapabilityStatement2.contact>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.contact> 
}

<OneOrMore_CapabilityStatement2.useContext> CLOSED {
    rdf:first @<CapabilityStatement2.useContext>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.useContext> 
}

<OneOrMore_CapabilityStatement2.jurisdiction> CLOSED {
    rdf:first @<CapabilityStatement2.jurisdiction>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.jurisdiction> 
}

<OneOrMore_CapabilityStatement2.instantiates> CLOSED {
    rdf:first @<CapabilityStatement2.instantiates>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.instantiates> 
}

<OneOrMore_CapabilityStatement2.imports> CLOSED {
    rdf:first @<CapabilityStatement2.imports>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.imports> 
}

<OneOrMore_CapabilityStatement2.format> CLOSED {
    rdf:first @<CapabilityStatement2.format>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.format> 
}

<OneOrMore_CapabilityStatement2.patchFormat> CLOSED {
    rdf:first @<CapabilityStatement2.patchFormat>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.patchFormat> 
}

<OneOrMore_CapabilityStatement2.implementationGuide> CLOSED {
    rdf:first @<CapabilityStatement2.implementationGuide>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.implementationGuide> 
}

<OneOrMore_CapabilityStatement2.rest> CLOSED {
    rdf:first @<CapabilityStatement2.rest>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest> 
}

<OneOrMore_CapabilityStatement2.rest.resource.supportedProfile> CLOSED {
    rdf:first @<CapabilityStatement2.rest.resource.supportedProfile>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.resource.supportedProfile> 
}

<OneOrMore_CapabilityStatement2.rest.feature> CLOSED {
    rdf:first @<CapabilityStatement2.rest.feature>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.feature> 
}

<OneOrMore_CapabilityStatement2.rest.resource.interaction> CLOSED {
    rdf:first @<CapabilityStatement2.rest.resource.interaction>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.resource.interaction> 
}

<OneOrMore_CapabilityStatement2.rest.resource.searchParam> CLOSED {
    rdf:first @<CapabilityStatement2.rest.resource.searchParam>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.resource.searchParam> 
}

<OneOrMore_CapabilityStatement2.rest.resource.operation> CLOSED {
    rdf:first @<CapabilityStatement2.rest.resource.operation>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.resource.operation> 
}

<OneOrMore_CapabilityStatement2.rest.resource> CLOSED {
    rdf:first @<CapabilityStatement2.rest.resource>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.resource> 
}

<OneOrMore_CapabilityStatement2.rest.interaction> CLOSED {
    rdf:first @<CapabilityStatement2.rest.interaction>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.interaction> 
}

<OneOrMore_CapabilityStatement2.rest.compartment> CLOSED {
    rdf:first @<CapabilityStatement2.rest.compartment>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CapabilityStatement2.rest.compartment> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
