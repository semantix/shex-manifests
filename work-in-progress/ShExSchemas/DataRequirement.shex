PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


# Describes a required data item
<DataRequirement> EXTENDS @<DataType> CLOSED {   

    a [fhir:DataRequirement];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:type @<DataRequirement.type>;      # The type of the required data
    fhir:profile @<OneOrMore_DataRequirement.profile>?;  # The profile of the required data
    fhir:subject (@<CodeableConcept>  OR 
    			(@<Reference>  AND {fhir:link @<Group> }) )  AND { rdf:type IRI } ?;  # E.g. Patient, Practitioner, 
                                            # RelatedPerson, Organization, 
                                            # Location, Device 
    fhir:mustSupport @<OneOrMore_DataRequirement.mustSupport>?;  # Indicates specific structure 
                                            # elements that are referenced by 
                                            # the knowledge module 
    fhir:codeFilter @<OneOrMore_DataRequirement.codeFilter>?;  # What codes are expected
    fhir:dateFilter @<OneOrMore_DataRequirement.dateFilter>?;  # What dates/date ranges are expected
    fhir:limit @<DataRequirement.limit>?;   # Number of results
    fhir:sort @<OneOrMore_DataRequirement.sort>?;  # Order of the results
} AND (

# Constraint: UniqueKey:drq-1
# Human readable:Either a path or a searchParam must be provided, but not both
# XPath:(exists(f:path) and not(exists(f:searchParam))) or (not(exists(f:path)) and exists(f:searchParam))
# Constraint:path.exists() xor searchParam.exists()
# ShEx:

({ fhir:path . } AND NOT  { fhir:searchParam . }) OR ( NOT { fhir:path . } AND  { fhir:searchParam . })

) AND (

# Constraint: UniqueKey:drq-2
# Human readable:Either a path or a searchParam must be provided, but not both
# XPath:(exists(f:path) and not(exists(f:searchParam))) or (not(exists(f:path)) and exists(f:searchParam))
# Constraint:path.exists() xor searchParam.exists()
# ShEx:

({ fhir:path . } AND NOT  { fhir:searchParam . }) OR ( NOT { fhir:path . } AND  { fhir:searchParam . })

)
 

# Order of the results
<DataRequirement.sort> EXTENDS @<Element> CLOSED {   
    fhir:path @<DataRequirement.sort.path>;  # The name of the attribute to 
                                            # perform the sort 
    fhir:direction @<DataRequirement.sort.direction>;  # ascending | descending
}  

# What codes are expected
<DataRequirement.codeFilter> EXTENDS @<Element> CLOSED {   
    fhir:path @<DataRequirement.codeFilter.path>?;  # A code-valued attribute to filter 
                                            # on 
    fhir:searchParam @<DataRequirement.codeFilter.searchParam>?;  # A coded (token) parameter to 
                                            # search on 
    fhir:valueSet @<DataRequirement.codeFilter.valueSet>?;  # Valueset for the filter
    fhir:code @<OneOrMore_DataRequirement.codeFilter.code>?;  # What code is expected
} AND (

# Constraint: UniqueKey:drq-1
# Human readable:Either a path or a searchParam must be provided, but not both
# XPath:(exists(f:path) and not(exists(f:searchParam))) or (not(exists(f:path)) and exists(f:searchParam))
# Constraint:path.exists() xor searchParam.exists()
# ShEx:

({ fhir:path . } AND NOT  { fhir:searchParam . }) OR ( NOT { fhir:path . } AND  { fhir:searchParam . })

) AND (

# Constraint: UniqueKey:drq-2
# Human readable:Either a path or a searchParam must be provided, but not both
# XPath:(exists(f:path) and not(exists(f:searchParam))) or (not(exists(f:path)) and exists(f:searchParam))
# Constraint:path.exists() xor searchParam.exists()
# ShEx:

({ fhir:path . } AND NOT  { fhir:searchParam . }) OR ( NOT { fhir:path . } AND  { fhir:searchParam . })

)
 

# What dates/date ranges are expected
<DataRequirement.dateFilter> EXTENDS @<Element> CLOSED {   
    fhir:path @<DataRequirement.dateFilter.path>?;  # A date-valued attribute to filter 
                                            # on 
    fhir:searchParam @<DataRequirement.dateFilter.searchParam>?;  # A date valued parameter to search 
                                            # on 
    fhir:value (@<dateTime>  OR 
    			@<Period>  OR 
    			@<Duration> )  AND { rdf:type IRI } ?;  # The value of the filter, as a 
                                            # Period, DateTime, or Duration 
                                            # value 
} AND (

# Constraint: UniqueKey:drq-1
# Human readable:Either a path or a searchParam must be provided, but not both
# XPath:(exists(f:path) and not(exists(f:searchParam))) or (not(exists(f:path)) and exists(f:searchParam))
# Constraint:path.exists() xor searchParam.exists()
# ShEx:

({ fhir:path . } AND NOT  { fhir:searchParam . }) OR ( NOT { fhir:path . } AND  { fhir:searchParam . })

) AND (

# Constraint: UniqueKey:drq-2
# Human readable:Either a path or a searchParam must be provided, but not both
# XPath:(exists(f:path) and not(exists(f:searchParam))) or (not(exists(f:path)) and exists(f:searchParam))
# Constraint:path.exists() xor searchParam.exists()
# ShEx:

({ fhir:path . } AND NOT  { fhir:searchParam . }) OR ( NOT { fhir:path . } AND  { fhir:searchParam . })

)
 

#---------------------- Data Types -------------------

# Primitive Type dateTime
<dateTime> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:dateTime];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<dateTime.value>?;              # Primitive value for dateTime
}  

# A reference from one resource to another
<Reference> EXTENDS @<DataType> CLOSED {   

    a [fhir:Reference];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:link IRI?;
    fhir:reference @<Reference.reference>?;  # Literal reference, Relative, 
                                            # internal or absolute URL 
    fhir:type @<Reference.type>?;           # Type the reference refers to (e.g. 
                                            # "Patient") 
    fhir:identifier @<Reference.identifier>?;  # Logical reference, when literal 
                                            # reference is not known 
    fhir:display @<Reference.display>?;     # Text alternative for the resource
} AND (

# Constraint: UniqueKey:ref-1
# Human readable:SHALL have a contained resource if a local reference is provided
# XPath:not(starts-with(f:reference/@value, '#')) or exists(ancestor::*[self::f:entry or self::f:parameter]/f:resource/f:*/f:contained/f:*[f:id/@value=substring-after(current()/f:reference/@value, '#')]|/*/f:contained/f:*[f:id/@value=substring-after(current()/f:reference/@value, '#')])
# Constraint:reference.startsWith('#').not() or (reference.substring(1).trace('url') in %rootResource.contained.id.trace('ids')) or (reference='#' and %rootResource!=%resource)
# ShEx:


)
 

# Time range defined by start and end date/time
<Period> EXTENDS @<DataType> CLOSED {   

    a [fhir:Period];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:start @<Period.start>?;            # Starting time with inclusive 
                                            # boundary 
    fhir:end @<Period.end>?;                # End time with inclusive boundary, 
                                            # if not ongoing 
} AND (

# Constraint: UniqueKey:per-1
# Human readable:If present, start SHALL have a lower or equal value than end
# XPath:not(exists(f:start/@value)) or not(exists(f:end/@value)) or (xs:dateTime(f:start/@value) <= xs:dateTime(f:end/@value))
# Constraint:start.hasValue().not() or end.hasValue().not() or (start <= end)
# ShEx:

 NOT { fhir:start  . } OR  NOT { fhir:end  . } OR ({ fhir:start { fhir:v MaxInclusive { fhir:end } }  })

)
 

# A length of time
<Duration> EXTENDS @<Quantity> CLOSED {   

    a [fhir:Duration];
    fhir:nodeRole [fhir:treeRoot]?;
} AND (

# Constraint: UniqueKey:drt-1
# Human readable:There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.
# XPath:(f:code or not(f:value)) and (not(exists(f:system)) or f:system/@value='http://unitsofmeasure.org')
# Constraint:code.exists() implies ((system = %ucum) and value.exists())
# ShEx:

{ fhir:code . } AND (({ fhir:system { fhir:v ['http://unitsofmeasure.org'] }  }) AND { fhir:value . })

)
 

# Concept - reference to a terminology or just  text
<CodeableConcept> EXTENDS @<DataType> CLOSED {   

    a [fhir:CodeableConcept];
    fhir:nodeRole [fhir:treeRoot]?;
    a NONLITERAL*;
    fhir:coding @<OneOrMore_CodeableConcept.coding>?;  # Code defined by a terminology 
                                            # system 
    fhir:text @<CodeableConcept.text>?;     # Plain text representation of the 
                                            # concept 
}  

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_DataRequirement.profile> CLOSED {
    rdf:first @<DataRequirement.profile>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DataRequirement.profile> 
}

<OneOrMore_DataRequirement.mustSupport> CLOSED {
    rdf:first @<DataRequirement.mustSupport>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DataRequirement.mustSupport> 
}

<OneOrMore_DataRequirement.codeFilter> CLOSED {
    rdf:first @<DataRequirement.codeFilter>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DataRequirement.codeFilter> 
}

<OneOrMore_DataRequirement.dateFilter> CLOSED {
    rdf:first @<DataRequirement.dateFilter>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DataRequirement.dateFilter> 
}

<OneOrMore_DataRequirement.sort> CLOSED {
    rdf:first @<DataRequirement.sort>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DataRequirement.sort> 
}

<OneOrMore_DataRequirement.codeFilter.code> CLOSED {
    rdf:first @<DataRequirement.codeFilter.code>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DataRequirement.codeFilter.code> 
}

<OneOrMore_CodeableConcept.coding> CLOSED {
    rdf:first @<CodeableConcept.coding>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CodeableConcept.coding> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
