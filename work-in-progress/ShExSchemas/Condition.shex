PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


start=@<Condition> AND {fhir:nodeRole [fhir:treeRoot]}


# Detailed information about conditions, problems or diagnoses
<Condition> EXTENDS @<DomainResource> CLOSED {   

    a [fhir:Condition];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:identifier @<OneOrMore_Condition.identifier>?;  # External Ids for this condition
    fhir:clinicalStatus @<Condition.clinicalStatus>;  # active | recurrence | relapse | 
                                            # inactive | remission | resolved 
    fhir:verificationStatus @<Condition.verificationStatus>?;  # unconfirmed | provisional | 
                                            # differential | confirmed | refuted 
                                            # | entered-in-error 
    fhir:category @<OneOrMore_Condition.category>?;  # problem-list-item | 
                                            # encounter-diagnosis 
    fhir:severity @<Condition.severity>?;   # Subjective severity of condition
    fhir:code @<Condition.code>?;           # Identification of the condition, 
                                            # problem or diagnosis 
    fhir:bodySite @<OneOrMore_Condition.bodySite>?;  # Anatomical location, if relevant
    fhir:subject @<Condition.subject> AND {fhir:link 
    			@<Group> OR 
    			@<Patient> };  # Who has the condition?
    fhir:encounter @<Condition.encounter> AND {fhir:link 
    			@<Encounter> }?;  # The Encounter during which this 
                                            # Condition was created 
    fhir:onset (@<dateTime>  OR 
    			@<Age>  OR 
    			@<Period>  OR 
    			@<Range>  OR 
    			@<string> )  AND { rdf:type IRI } ?;  # Estimated or actual date,  
                                            # date-time, or age 
    fhir:abatement (@<dateTime>  OR 
    			@<Age>  OR 
    			@<Period>  OR 
    			@<Range>  OR 
    			@<string> )  AND { rdf:type IRI } ?;  # When in resolution/remission
    fhir:recordedDate @<Condition.recordedDate>?;  # Date condition was first recorded
    fhir:participant @<OneOrMore_Condition.participant>?;  # Who or what participated in the 
                                            # activities related to the 
                                            # condition and how they were 
                                            # involved 
    fhir:stage @<OneOrMore_Condition.stage>?;  # Stage/grade, usually assessed 
                                            # formally 
    fhir:evidence @<OneOrMore_Condition.evidence>?;  # Supporting evidence for the 
                                            # verification status 
    fhir:note @<OneOrMore_Condition.note>?;  # Additional information about the 
                                            # Condition 
} AND (

# Constraint: UniqueKey:con-2
# Human readable:If category is problems list item, the clinicalStatus should not be unknown
# XPath:not(exists(f:category/f:coding[f:system/@value='http://terminology.hl7.org/CodeSystem/condition-category' and f:code/@value='problem-list-item'])) or not(exists(f:clinicalStatus/f:coding[f:system/@value='http://terminology.hl7.org/CodeSystem/condition-clinical' and f:code/@value='unknown']))
# Constraint:category.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-category' and code='problem-list-item').exists() implies clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and code='unknown').exists().not()
# ShEx:

{ fhir:category.coding SHEX_where_SHEX (fhir:system { fhir:v ['http://terminology.hl7.org/CodeSystem/condition-category'] }  AND fhir:code { fhir:v ['problem-list-item'] } ) . } AND  NOT { fhir:clinicalStatus fhir:coding  SHEX_where_SHEX (fhir:system { fhir:v ['http://terminology.hl7.org/CodeSystem/condition-clinical'] }  AND fhir:code { fhir:v ['unknown'] } )  . }

) AND (

# Constraint: UniqueKey:con-3
# Human readable:If condition is abated, then clinicalStatus must be either inactive, resolved, or remission.
# XPath:not(exists(f:*[starts-with(local-name(.), 'abatement')])) or (not(exists(f:clinicalStatus)) or exists(f:clinicalStatus/f:coding[f:system/@value='http://terminology.hl7.org/CodeSystem/condition-clinical' and f:code/@value=('inactive', 'resolved', 'remission')]))
# Constraint:abatement.exists() implies (clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and (code='inactive' or code='resolved' or code='remission')).exists())
# ShEx:

{ fhir:abatement . } AND ({ fhir:clinicalStatus.coding SHEX_where_SHEX (fhir:system { fhir:v ['http://terminology.hl7.org/CodeSystem/condition-clinical'] }  AND fhir:code { fhir:v ['inactive'] }  OR fhir:code { fhir:v ['resolved'] }  OR fhir:code { fhir:v ['remission'] } ) . })

) AND (

# Constraint: UniqueKey:con-1
# Human readable:Stage SHALL have summary or assessment
# XPath:exists(f:summary) or exists(f:assessment)
# Constraint:summary.exists() or assessment.exists()
# ShEx:

{ fhir:summary . } OR { fhir:assessment . }

)
 

# Who or what participated in the activities related to the condition and how they were involved
<Condition.participant> EXTENDS @<BackboneElement> CLOSED {   
    fhir:function @<Condition.participant.function>?;  # Type of involvement
    fhir:actor @<Condition.participant.actor> AND {fhir:link 
    			@<CareTeam> OR 
    			@<Device> OR 
    			@<Organization> OR 
    			@<Patient> OR 
    			@<Practitioner> OR 
    			@<PractitionerRole> OR 
    			@<RelatedPerson> };  # Who or what participated in the 
                                            # activities related to the 
                                            # condition 
}  

# Stage/grade, usually assessed formally
<Condition.stage> EXTENDS @<BackboneElement> CLOSED {   
    fhir:summary @<Condition.stage.summary>?;  # Simple summary (disease specific)
    fhir:assessment @<OneOrMore_Condition.stage.assessment_ClinicalImpression_OR_DiagnosticReport_OR_Observation>?;  # Formal record of assessment
    fhir:type @<Condition.stage.type>?;     # Kind of staging
} AND (

# Constraint: UniqueKey:con-2
# Human readable:If category is problems list item, the clinicalStatus should not be unknown
# XPath:not(exists(f:category/f:coding[f:system/@value='http://terminology.hl7.org/CodeSystem/condition-category' and f:code/@value='problem-list-item'])) or not(exists(f:clinicalStatus/f:coding[f:system/@value='http://terminology.hl7.org/CodeSystem/condition-clinical' and f:code/@value='unknown']))
# Constraint:category.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-category' and code='problem-list-item').exists() implies clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and code='unknown').exists().not()
# ShEx:

{ fhir:category.coding SHEX_where_SHEX (fhir:system { fhir:v ['http://terminology.hl7.org/CodeSystem/condition-category'] }  AND fhir:code { fhir:v ['problem-list-item'] } ) . } AND  NOT { fhir:clinicalStatus fhir:coding  SHEX_where_SHEX (fhir:system { fhir:v ['http://terminology.hl7.org/CodeSystem/condition-clinical'] }  AND fhir:code { fhir:v ['unknown'] } )  . }

) AND (

# Constraint: UniqueKey:con-3
# Human readable:If condition is abated, then clinicalStatus must be either inactive, resolved, or remission.
# XPath:not(exists(f:*[starts-with(local-name(.), 'abatement')])) or (not(exists(f:clinicalStatus)) or exists(f:clinicalStatus/f:coding[f:system/@value='http://terminology.hl7.org/CodeSystem/condition-clinical' and f:code/@value=('inactive', 'resolved', 'remission')]))
# Constraint:abatement.exists() implies (clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and (code='inactive' or code='resolved' or code='remission')).exists())
# ShEx:

{ fhir:abatement . } AND ({ fhir:clinicalStatus.coding SHEX_where_SHEX (fhir:system { fhir:v ['http://terminology.hl7.org/CodeSystem/condition-clinical'] }  AND fhir:code { fhir:v ['inactive'] }  OR fhir:code { fhir:v ['resolved'] }  OR fhir:code { fhir:v ['remission'] } ) . })

) AND (

# Constraint: UniqueKey:con-1
# Human readable:Stage SHALL have summary or assessment
# XPath:exists(f:summary) or exists(f:assessment)
# Constraint:summary.exists() or assessment.exists()
# ShEx:

{ fhir:summary . } OR { fhir:assessment . }

)
 

#---------------------- Data Types -------------------

# Primitive Type dateTime
<dateTime> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:dateTime];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<dateTime.value>?;              # Primitive value for dateTime
}  

# Primitive Type string
<string> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:string];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<string.value>?;                # Primitive value for string
}  

# Time range defined by start and end date/time
<Period> EXTENDS @<DataType> CLOSED {   

    a [fhir:Period];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:start @<Period.start>?;            # Starting time with inclusive 
                                            # boundary 
    fhir:end @<Period.end>?;                # End time with inclusive boundary, 
                                            # if not ongoing 
} AND (

# Constraint: UniqueKey:per-1
# Human readable:If present, start SHALL have a lower or equal value than end
# XPath:not(exists(f:start/@value)) or not(exists(f:end/@value)) or (xs:dateTime(f:start/@value) <= xs:dateTime(f:end/@value))
# Constraint:start.hasValue().not() or end.hasValue().not() or (start <= end)
# ShEx:

 NOT { fhir:start  . } OR  NOT { fhir:end  . } OR ({ fhir:start { fhir:v MaxInclusive { fhir:end } }  })

)
 

# Set of values bounded by low and high
<Range> EXTENDS @<DataType> CLOSED {   

    a [fhir:Range];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:low @<Range.low>?;                 # Low limit
    fhir:high @<Range.high>?;               # High limit
} AND (

# Constraint: UniqueKey:rng-2
# Human readable:If present, low SHALL have a lower value than high
# XPath:not(exists(f:low/f:value/@value)) or not(exists(f:high/f:value/@value)) or (number(f:low/f:value/@value) <= number(f:high/f:value/@value))
# Constraint:low.value.empty() or high.value.empty() or (low <= high)
# ShEx:

 NOT { fhir:low fhir:value {fhir:v .} }  OR  NOT { fhir:high fhir:value {fhir:v .} }  OR ({ fhir:low { fhir:v MaxInclusive { fhir:high } }  })

)
 

# A duration of time during which an organism (or a process) has existed
<Age> EXTENDS @<Quantity> CLOSED {   

    a [fhir:Age];
    fhir:nodeRole [fhir:treeRoot]?;
} AND (

# Constraint: UniqueKey:age-1
# Human readable:There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.  If value is present, it SHALL be positive.
# XPath:(f:code or not(f:value)) and (not(exists(f:system)) or f:system/@value='http://unitsofmeasure.org') and (not(f:value/@value) or f:value/@value >=0)
# Constraint:(code.exists() or value.empty()) and (system.empty() or system = %ucum) and (value.empty() or value.hasValue().not() or value > 0)
# ShEx:

({ fhir:code . } OR  NOT { fhir:value {fhir:v .} } ) AND ( NOT { fhir:system {fhir:v .} }  OR ({ fhir:system { fhir:v ['http://unitsofmeasure.org'] }  })) AND ( NOT { fhir:value {fhir:v .} }  OR  NOT { fhir:value  . } OR ({ fhir:value { fhir:v MinExclusive 0 }  }))

)
 

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_Condition.identifier> CLOSED {
    rdf:first @<Condition.identifier>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.identifier> 
}

<OneOrMore_Condition.category> CLOSED {
    rdf:first @<Condition.category>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.category> 
}

<OneOrMore_Condition.bodySite> CLOSED {
    rdf:first @<Condition.bodySite>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.bodySite> 
}

<OneOrMore_Condition.participant> CLOSED {
    rdf:first @<Condition.participant>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.participant> 
}

<OneOrMore_Condition.stage> CLOSED {
    rdf:first @<Condition.stage>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.stage> 
}

<OneOrMore_Condition.evidence> CLOSED {
    rdf:first @<Condition.evidence>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.evidence> 
}

<OneOrMore_Condition.note> CLOSED {
    rdf:first @<Condition.note>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.note> 
}

<OneOrMore_Condition.stage.assessment_ClinicalImpression_OR_DiagnosticReport_OR_Observation> CLOSED {
    rdf:first @<Condition.stage.assessment> AND {fhir:link 
			@<ClinicalImpression> OR 
			@<DiagnosticReport> OR 
			@<Observation> } ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Condition.stage.assessment_ClinicalImpression_OR_DiagnosticReport_OR_Observation> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
