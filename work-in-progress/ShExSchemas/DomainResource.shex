PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


start=@<DomainResource> AND {fhir:nodeRole [fhir:treeRoot]}


# A resource with narrative, extensions, and contained resources
<DomainResource> EXTENDS @<Resource> CLOSED {   

    a [fhir:DomainResource];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:text @<DomainResource.text>?;      # Text summary of the resource, for 
                                            # human interpretation 
    fhir:contained @<OneOrMore_DomainResource.contained>?;  # Contained, inline Resources
    fhir:extension @<OneOrMore_DomainResource.extension>?;  # Additional content defined by 
                                            # implementations 
    fhir:modifierExtension @<OneOrMore_DomainResource.modifierExtension>?;  # Extensions that cannot be ignored
} AND (

# Constraint: UniqueKey:dom-2
# Human readable:If the resource is contained in another resource, it SHALL NOT contain nested Resources
# XPath:not(parent::f:contained and f:contained)
# Constraint:contained.contained.empty()
# ShEx:

 NOT { fhir:contained fhir:contained {fhir:v .} } 

) AND (

# Constraint: UniqueKey:dom-4
# Human readable:If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated
# XPath:not(exists(f:contained/*/f:meta/f:versionId)) and not(exists(f:contained/*/f:meta/f:lastUpdated))
# Constraint:contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()
# ShEx:

 NOT { fhir:contained fhir:meta fhir:versionId {fhir:v .} }  AND  NOT { fhir:contained fhir:meta fhir:lastUpdated {fhir:v .} } 

) AND (

# Constraint: UniqueKey:dom-3
# Human readable:If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource
# XPath:not(exists(for $contained in f:contained return $contained[not(exists(parent::*/descendant::f:reference/@value=concat('#', $contained/*/f:id/@value)) or exists(descendant::f:reference[@value='#']))]))
# Constraint:contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(canonical) = '#').exists()).not()).trace('unmatched', id).empty()
# ShEx:


) AND (

# Constraint: UniqueKey:dom-6
# Human readable:A resource should have narrative for robust management
# XPath:exists(f:text/h:div)
# Constraint:text.`div`.exists()
# ShEx:

{ fhir:text.div . }

) AND (

# Constraint: UniqueKey:dom-5
# Human readable:If a resource is contained in another resource, it SHALL NOT have a security label
# XPath:not(exists(f:contained/*/f:meta/f:security))
# Constraint:contained.meta.security.empty()
# ShEx:

 NOT { fhir:contained fhir:meta fhir:security {fhir:v .} } 

)
 

#---------------------- Data Types -------------------

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_DomainResource.contained> CLOSED {
    rdf:first @<DomainResource.contained>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DomainResource.contained> 
}

<OneOrMore_DomainResource.extension> CLOSED {
    rdf:first @<DomainResource.extension>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DomainResource.extension> 
}

<OneOrMore_DomainResource.modifierExtension> CLOSED {
    rdf:first @<DomainResource.modifierExtension>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_DomainResource.modifierExtension> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
