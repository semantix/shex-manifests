PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


start=@<Bundle> AND {fhir:nodeRole [fhir:treeRoot]}


# Contains a collection of resources
<Bundle> EXTENDS @<Resource> CLOSED {   

    a [fhir:Bundle];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:identifier @<Bundle.identifier>?;  # Persistent identifier for the 
                                            # bundle 
    fhir:type @<Bundle.type>;               # document | message | transaction | 
                                            # transaction-response | batch | 
                                            # batch-response | history | 
                                            # searchset | collection | 
                                            # subscription-notification 
    fhir:timestamp @<Bundle.timestamp>?;    # When the bundle was assembled
    fhir:total @<Bundle.total>?;            # If search, the total number of 
                                            # matches 
    fhir:link @<OneOrMore_Bundle.link>?;    # Links related to this Bundle
    fhir:entry @<OneOrMore_Bundle.entry>?;  # Entry in the bundle - will have a 
                                            # resource or information 
    fhir:signature @<Bundle.signature>?;    # Digital Signature
} AND (

# Constraint: UniqueKey:bdl-7
# Human readable:FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)
# XPath:(f:type/@value = 'history') or (count(for $entry in f:entry[f:resource] return $entry[count(parent::f:Bundle/f:entry[f:fullUrl/@value=$entry/f:fullUrl/@value and ((not(f:resource/*/f:meta/f:versionId/@value) and not($entry/f:resource/*/f:meta/f:versionId/@value)) or f:resource/*/f:meta/f:versionId/@value=$entry/f:resource/*/f:meta/f:versionId/@value)])!=1])=0)
# Constraint:(type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&resource.meta.versionId).isDistinct()
# ShEx:

({ fhir:type { fhir:v ['history'] }  }) OR  isDistinct( fhir:entry  SHEX_where_SHEX (fhir:fullUrl .)  SHEX_select_SHEX (fhir:fullUrl SHEX_Concatenate_SHEX fhir:resource.meta.versionId) )

) AND (

# Constraint: UniqueKey:bdl-9
# Human readable:A document must have an identifier with a system and a value
# XPath:not(f:type/@value = 'document') or exists(f:identifier/f:system) or exists(f:identifier/f:value)
# Constraint:type = 'document' implies (identifier.system.exists() and identifier.value.exists())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({ fhir:identifier.system . } AND { fhir:identifier.value . })

) AND (

# Constraint: UniqueKey:bdl-3
# Human readable:entry.request mandatory for batch/transaction/history, allowed for subscription-notification, otherwise prohibited
# XPath:not(f:entry/f:request) or (f:type/@value = 'batch') or (f:type/@value = 'transaction') or (f:type/@value = 'history') or (f:type/@value = 'subscription-notification)
# Constraint:entry.all(request.exists() = (%resource.type = 'batch' or %resource.type = 'transaction' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:


) AND (

# Constraint: UniqueKey:bdl-4
# Human readable:entry.response mandatory for batch-response/transaction-response/history, allowed for subscription-notification, otherwise prohibited
# XPath:not(f:entry/f:response) or (f:type/@value = 'batch-response') or (f:type/@value = 'transaction-response') or (f:type/@value = 'history') or (f:type/@value = 'subscription-notification)
# Constraint:entry.all(response.exists() = (%resource.type = 'batch-response' or %resource.type = 'transaction-response' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:


) AND (

# Constraint: UniqueKey:bdl-13
# Human readable:A subscription-notification must have a SubscriptionStatus as the first resource
# XPath:not(f:type/@value='subscription-notification') or f:entry[1]/f:resource/f:SubscriptionStatus
# Constraint:type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)
# ShEx:

({ fhir:type { fhir:v ['subscription-notification'] }  }) AND  first( fhir:entry ).resource { a [fhir:SubscriptionStatus] } 

) AND (

# Constraint: UniqueKey:bdl-12
# Human readable:A message must have a MessageHeader as the first resource
# XPath:not(f:type/@value='message') or f:entry[1]/f:resource/f:MessageHeader
# Constraint:type = 'message' implies entry.first().resource.is(MessageHeader)
# ShEx:

({ fhir:type { fhir:v ['message'] }  }) AND  first( fhir:entry ).resource { a [fhir:MessageHeader] } 

) AND (

# Constraint: UniqueKey:bdl-1
# Human readable:total only when a search or history
# XPath:not(f:total) or (f:type/@value = 'searchset') or (f:type/@value = 'history')
# Constraint:total.empty() or (type = 'searchset') or (type = 'history')
# ShEx:

 NOT { fhir:total {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  }) OR ({ fhir:type { fhir:v ['history'] }  })

) AND (

# Constraint: UniqueKey:bdl-2
# Human readable:entry.search only when a search
# XPath:not(f:entry/f:search) or (f:type/@value = 'searchset')
# Constraint:entry.search.empty() or (type = 'searchset')
# ShEx:

 NOT { fhir:entry fhir:search {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  })

) AND (

# Constraint: UniqueKey:bdl-14
# Human readable:entry.request.method PATCH not allowed for history
# XPath:(f:type/@value = 'history') and not(f:entry/request/method/@value = 'PATCH')
# Constraint:type = 'history' implies entry.request.method != 'PATCH'
# ShEx:

({ fhir:type { fhir:v ['history'] }  }) AND ({ fhir:entry.request.method } { fhir:v [ . -'PATCH'] })

) AND (

# Constraint: UniqueKey:bdl-11
# Human readable:A document must have a Composition as the first resource
# XPath:not(f:type/@value='document') or f:entry[1]/f:resource/f:Composition
# Constraint:type = 'document' implies entry.first().resource.is(Composition)
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND  first( fhir:entry ).resource { a [fhir:Composition] } 

) AND (

# Constraint: UniqueKey:bdl-10
# Human readable:A document must have a date
# XPath:not(f:type/@value = 'document') or exists(f:timestamp/f:value)
# Constraint:type = 'document' implies (timestamp.hasValue())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({ fhir:timestamp . })

) AND (

# Constraint: UniqueKey:bdl-8
# Human readable:fullUrl cannot be a version specific reference
# XPath:not(exists(f:fullUrl[contains(string(@value), '/_history/')]))
# Constraint:fullUrl.exists() implies fullUrl.contains('/_history/').not()
# ShEx:

{ fhir:fullUrl . } AND  NOT { fhir:fullUrl  { fhir:v ['/_history/'] }  }

) AND (

# Constraint: UniqueKey:bdl-5
# Human readable:must be a resource unless there's a request or response
# XPath:exists(f:resource) or exists(f:request) or exists(f:response)
# Constraint:resource.exists() or request.exists() or response.exists()
# ShEx:

{ fhir:resource . } OR { fhir:request . } OR { fhir:response . }

)
 

# Entry in the bundle - will have a resource or information
<Bundle.entry> EXTENDS @<BackboneElement> CLOSED {   
    fhir:link @<OneOrMore_Bundle.link>?;    # Links related to this entry
    fhir:fullUrl @<Bundle.entry.fullUrl>?;  # URI for resource (Absolute URL 
                                            # server address or URI for 
                                            # UUID/OID) 
    fhir:resource @<Bundle.entry.resource>?;  # A resource in the bundle
    fhir:search @<Bundle.entry.search>?;    # Search related information
    fhir:request @<Bundle.entry.request>?;  # Additional execution information 
                                            # (transaction/batch/history) 
    fhir:response @<Bundle.entry.response>?;  # Results of execution 
                                            # (transaction/batch/history) 
} AND (

# Constraint: UniqueKey:bdl-7
# Human readable:FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)
# XPath:(f:type/@value = 'history') or (count(for $entry in f:entry[f:resource] return $entry[count(parent::f:Bundle/f:entry[f:fullUrl/@value=$entry/f:fullUrl/@value and ((not(f:resource/*/f:meta/f:versionId/@value) and not($entry/f:resource/*/f:meta/f:versionId/@value)) or f:resource/*/f:meta/f:versionId/@value=$entry/f:resource/*/f:meta/f:versionId/@value)])!=1])=0)
# Constraint:(type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&resource.meta.versionId).isDistinct()
# ShEx:

({ fhir:type { fhir:v ['history'] }  }) OR  isDistinct( fhir:entry  SHEX_where_SHEX (fhir:fullUrl .)  SHEX_select_SHEX (fhir:fullUrl SHEX_Concatenate_SHEX fhir:resource.meta.versionId) )

) AND (

# Constraint: UniqueKey:bdl-9
# Human readable:A document must have an identifier with a system and a value
# XPath:not(f:type/@value = 'document') or exists(f:identifier/f:system) or exists(f:identifier/f:value)
# Constraint:type = 'document' implies (identifier.system.exists() and identifier.value.exists())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({ fhir:identifier.system . } AND { fhir:identifier.value . })

) AND (

# Constraint: UniqueKey:bdl-3
# Human readable:entry.request mandatory for batch/transaction/history, allowed for subscription-notification, otherwise prohibited
# XPath:not(f:entry/f:request) or (f:type/@value = 'batch') or (f:type/@value = 'transaction') or (f:type/@value = 'history') or (f:type/@value = 'subscription-notification)
# Constraint:entry.all(request.exists() = (%resource.type = 'batch' or %resource.type = 'transaction' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:


) AND (

# Constraint: UniqueKey:bdl-4
# Human readable:entry.response mandatory for batch-response/transaction-response/history, allowed for subscription-notification, otherwise prohibited
# XPath:not(f:entry/f:response) or (f:type/@value = 'batch-response') or (f:type/@value = 'transaction-response') or (f:type/@value = 'history') or (f:type/@value = 'subscription-notification)
# Constraint:entry.all(response.exists() = (%resource.type = 'batch-response' or %resource.type = 'transaction-response' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:


) AND (

# Constraint: UniqueKey:bdl-13
# Human readable:A subscription-notification must have a SubscriptionStatus as the first resource
# XPath:not(f:type/@value='subscription-notification') or f:entry[1]/f:resource/f:SubscriptionStatus
# Constraint:type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)
# ShEx:

({ fhir:type { fhir:v ['subscription-notification'] }  }) AND  first( fhir:entry ).resource { a [fhir:SubscriptionStatus] } 

) AND (

# Constraint: UniqueKey:bdl-12
# Human readable:A message must have a MessageHeader as the first resource
# XPath:not(f:type/@value='message') or f:entry[1]/f:resource/f:MessageHeader
# Constraint:type = 'message' implies entry.first().resource.is(MessageHeader)
# ShEx:

({ fhir:type { fhir:v ['message'] }  }) AND  first( fhir:entry ).resource { a [fhir:MessageHeader] } 

) AND (

# Constraint: UniqueKey:bdl-1
# Human readable:total only when a search or history
# XPath:not(f:total) or (f:type/@value = 'searchset') or (f:type/@value = 'history')
# Constraint:total.empty() or (type = 'searchset') or (type = 'history')
# ShEx:

 NOT { fhir:total {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  }) OR ({ fhir:type { fhir:v ['history'] }  })

) AND (

# Constraint: UniqueKey:bdl-2
# Human readable:entry.search only when a search
# XPath:not(f:entry/f:search) or (f:type/@value = 'searchset')
# Constraint:entry.search.empty() or (type = 'searchset')
# ShEx:

 NOT { fhir:entry fhir:search {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  })

) AND (

# Constraint: UniqueKey:bdl-14
# Human readable:entry.request.method PATCH not allowed for history
# XPath:(f:type/@value = 'history') and not(f:entry/request/method/@value = 'PATCH')
# Constraint:type = 'history' implies entry.request.method != 'PATCH'
# ShEx:

({ fhir:type { fhir:v ['history'] }  }) AND ({ fhir:entry.request.method } { fhir:v [ . -'PATCH'] })

) AND (

# Constraint: UniqueKey:bdl-11
# Human readable:A document must have a Composition as the first resource
# XPath:not(f:type/@value='document') or f:entry[1]/f:resource/f:Composition
# Constraint:type = 'document' implies entry.first().resource.is(Composition)
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND  first( fhir:entry ).resource { a [fhir:Composition] } 

) AND (

# Constraint: UniqueKey:bdl-10
# Human readable:A document must have a date
# XPath:not(f:type/@value = 'document') or exists(f:timestamp/f:value)
# Constraint:type = 'document' implies (timestamp.hasValue())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({ fhir:timestamp . })

) AND (

# Constraint: UniqueKey:bdl-8
# Human readable:fullUrl cannot be a version specific reference
# XPath:not(exists(f:fullUrl[contains(string(@value), '/_history/')]))
# Constraint:fullUrl.exists() implies fullUrl.contains('/_history/').not()
# ShEx:

{ fhir:fullUrl . } AND  NOT { fhir:fullUrl  { fhir:v ['/_history/'] }  }

) AND (

# Constraint: UniqueKey:bdl-5
# Human readable:must be a resource unless there's a request or response
# XPath:exists(f:resource) or exists(f:request) or exists(f:response)
# Constraint:resource.exists() or request.exists() or response.exists()
# ShEx:

{ fhir:resource . } OR { fhir:request . } OR { fhir:response . }

)
 

# Results of execution (transaction/batch/history)
<Bundle.entry.response> EXTENDS @<BackboneElement> CLOSED {   
    fhir:status @<Bundle.entry.response.status>;  # Status response code (text 
                                            # optional) 
    fhir:location @<Bundle.entry.response.location>?;  # The location (if the operation 
                                            # returns a location) 
    fhir:etag @<Bundle.entry.response.etag>?;  # The Etag for the resource (if 
                                            # relevant) 
    fhir:lastModified @<Bundle.entry.response.lastModified>?;  # Server's date time modified
    fhir:outcome @<Bundle.entry.response.outcome>?;  # OperationOutcome with hints and 
                                            # warnings (for batch/transaction) 
}  

# Additional execution information (transaction/batch/history)
<Bundle.entry.request> EXTENDS @<BackboneElement> CLOSED {   
    fhir:method @<Bundle.entry.request.method>;  # GET | HEAD | POST | PUT | DELETE | 
                                            # PATCH 
    fhir:url @<Bundle.entry.request.url>;   # URL for HTTP equivalent of this 
                                            # entry 
    fhir:ifNoneMatch @<Bundle.entry.request.ifNoneMatch>?;  # For managing cache currency
    fhir:ifModifiedSince @<Bundle.entry.request.ifModifiedSince>?;  # For managing cache currency
    fhir:ifMatch @<Bundle.entry.request.ifMatch>?;  # For managing update contention
    fhir:ifNoneExist @<Bundle.entry.request.ifNoneExist>?;  # For conditional creates
}  

# Links related to this Bundle
<Bundle.link> EXTENDS @<BackboneElement> CLOSED {   
    fhir:relation @<Bundle.link.relation>;  # See 
                                            # http://www.iana.org/assignments/-
                                            # link-relations/link-relations.xh-
                                            # tml#link-relations-1 
    fhir:url @<Bundle.link.url>;            # Reference details for the link
}  

# Search related information
<Bundle.entry.search> EXTENDS @<BackboneElement> CLOSED {   
    fhir:mode @<Bundle.entry.search.mode>?;  # match | include | outcome - why 
                                            # this is in the result set 
    fhir:score @<Bundle.entry.search.score>?;  # Search ranking (between 0 and 1)
}  

#---------------------- Data Types -------------------

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_Bundle.link> CLOSED {
    rdf:first @<Bundle.link>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Bundle.link> 
}

<OneOrMore_Bundle.entry> CLOSED {
    rdf:first @<Bundle.entry>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Bundle.entry> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
