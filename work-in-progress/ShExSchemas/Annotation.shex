PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


# Text node with attribution
<Annotation> EXTENDS @<DataType> CLOSED {   

    a [fhir:Annotation];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:author ((@<Reference>  AND {fhir:link @<Practitioner> OR 
    			 @<PractitionerRole> OR 
    			 @<Patient> OR 
    			 @<RelatedPerson> OR 
    			 @<Organization> })  OR 
    			@<string> )  AND { rdf:type IRI } ?;  # Individual responsible for the 
                                            # annotation 
    fhir:time @<Annotation.time>?;          # When the annotation was made
    fhir:text @<Annotation.text>;           # The annotation  - text content (as 
                                            # markdown) 
}  

#---------------------- Data Types -------------------

# Primitive Type string
<string> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:string];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<string.value>?;                # Primitive value for string
}  

# A reference from one resource to another
<Reference> EXTENDS @<DataType> CLOSED {   

    a [fhir:Reference];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:link IRI?;
    fhir:reference @<Reference.reference>?;  # Literal reference, Relative, 
                                            # internal or absolute URL 
    fhir:type @<Reference.type>?;           # Type the reference refers to (e.g. 
                                            # "Patient") 
    fhir:identifier @<Reference.identifier>?;  # Logical reference, when literal 
                                            # reference is not known 
    fhir:display @<Reference.display>?;     # Text alternative for the resource
} AND (

# Constraint: UniqueKey:ref-1
# Human readable:SHALL have a contained resource if a local reference is provided
# XPath:not(starts-with(f:reference/@value, '#')) or exists(ancestor::*[self::f:entry or self::f:parameter]/f:resource/f:*/f:contained/f:*[f:id/@value=substring-after(current()/f:reference/@value, '#')]|/*/f:contained/f:*[f:id/@value=substring-after(current()/f:reference/@value, '#')])
# Constraint:reference.startsWith('#').not() or (reference.substring(1).trace('url') in %rootResource.contained.id.trace('ids')) or (reference='#' and %rootResource!=%resource)
# ShEx:


)
 

#---------------------- Cardinality Types (OneOrMore) -------------------

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
