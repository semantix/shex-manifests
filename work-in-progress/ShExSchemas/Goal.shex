PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


start=@<Goal> AND {fhir:nodeRole [fhir:treeRoot]}


# Describes the intended objective(s) for a patient, group or organization
<Goal> EXTENDS @<DomainResource> CLOSED {   

    a [fhir:Goal];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:identifier @<OneOrMore_Goal.identifier>?;  # External Ids for this goal
    fhir:lifecycleStatus @<Goal.lifecycleStatus>;  # proposed | planned | accepted | 
                                            # active | on-hold | completed | 
                                            # cancelled | entered-in-error | 
                                            # rejected 
    fhir:achievementStatus @<Goal.achievementStatus>?;  # in-progress | improving | 
                                            # worsening | no-change | achieved | 
                                            # sustaining | not-achieved | 
                                            # no-progress | not-attainable 
    fhir:category @<OneOrMore_Goal.category>?;  # E.g. Treatment, dietary, 
                                            # behavioral, etc. 
    fhir:continuous @<Goal.continuous>?;    # After meeting the goal, ongoing 
                                            # activity is needed to sustain the 
                                            # goal objective 
    fhir:priority @<Goal.priority>?;        # high-priority | medium-priority | 
                                            # low-priority 
    fhir:description @<Goal.description>;   # Code or text describing goal
    fhir:subject @<Goal.subject> AND {fhir:link 
    			@<Group> OR 
    			@<Organization> OR 
    			@<Patient> };  # Who this goal is intended for
    fhir:start (@<date>  OR 
    			@<CodeableConcept> )  AND { rdf:type IRI } ?;  # When goal pursuit begins
    fhir:target @<OneOrMore_Goal.target>?;  # Target outcome for the goal
    fhir:statusDate @<Goal.statusDate>?;    # When goal status took effect
    fhir:statusReason @<Goal.statusReason>?;  # Reason for current status
    fhir:source @<Goal.source> AND {fhir:link 
    			@<CareTeam> OR 
    			@<Patient> OR 
    			@<Practitioner> OR 
    			@<PractitionerRole> OR 
    			@<RelatedPerson> }?;  # Who's responsible for creating 
                                            # Goal? 
    fhir:addresses @<OneOrMore_Goal.addresses_Condition_OR_MedicationRequest_OR_MedicationUsage_OR_NutritionOrder_OR_Observation_OR_RiskAssessment_OR_ServiceRequest>?;  # Issues addressed by this goal
    fhir:note @<OneOrMore_Goal.note>?;      # Comments about the goal
    fhir:outcome @<OneOrMore_Goal.outcome>?;  # What result was achieved regarding 
                                            # the goal? 
} AND (

# Constraint: UniqueKey:gol-1
# Human readable:Goal.target.measure is required if Goal.target.detail is populated
# XPath:(exists(f:*[starts-with(local-name(.), 'detail')]) and exists(f:measure)) or not(exists(f:*[starts-with(local-name(.), 'detail')]))
# Constraint:(detail.exists() and measure.exists()) or detail.exists().not()
# ShEx:

({ fhir:detail . } AND { fhir:measure . }) OR  NOT { fhir:detail  . }

)
 

# Target outcome for the goal
<Goal.target> EXTENDS @<BackboneElement> CLOSED {   
    fhir:measure @<Goal.target.measure>?;   # The parameter whose value is being 
                                            # tracked 
    fhir:detail (@<Quantity>  OR 
    			@<Range>  OR 
    			@<CodeableConcept>  OR 
    			@<string>  OR 
    			@<boolean>  OR 
    			@<integer>  OR 
    			@<Ratio> )  AND { rdf:type IRI } ?;  # The target value to be achieved
    fhir:due (@<date>  OR 
    			@<Duration> )  AND { rdf:type IRI } ?;  # Reach goal on or before
} AND (

# Constraint: UniqueKey:gol-1
# Human readable:Goal.target.measure is required if Goal.target.detail is populated
# XPath:(exists(f:*[starts-with(local-name(.), 'detail')]) and exists(f:measure)) or not(exists(f:*[starts-with(local-name(.), 'detail')]))
# Constraint:(detail.exists() and measure.exists()) or detail.exists().not()
# ShEx:

({ fhir:detail . } AND { fhir:measure . }) OR  NOT { fhir:detail  . }

)
 

#---------------------- Data Types -------------------

# Primitive Type date
<date> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:date];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<date.value>?;                  # Primitive value for date
}  

# Primitive Type boolean
<boolean> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:boolean];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<boolean.value>?;               # Primitive value for boolean
}  

# Primitive Type string
<string> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:string];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<string.value>?;                # Primitive value for string
}  

# A measured or measurable amount
<Quantity> EXTENDS @<DataType> CLOSED {   

    a [fhir:Quantity];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:value @<Quantity.value>?;          # Numerical value (with implicit 
                                            # precision) 
    fhir:comparator @<Quantity.comparator>?;  # < | <= | >= | > | ad - how to 
                                            # understand the value 
    fhir:unit @<Quantity.unit>?;            # Unit representation
    fhir:system @<Quantity.system>?;        # System that defines coded unit form
    fhir:code @<Quantity.code>?;            # Coded form of the unit
} AND (

# Constraint: UniqueKey:qty-3
# Human readable:If a code for the unit is present, the system SHALL also be present
# XPath:not(exists(f:code)) or exists(f:system)
# Constraint:code.empty() or system.exists()
# ShEx:

 NOT { fhir:code {fhir:v .} }  OR { fhir:system . }

)
 

# A ratio of two Quantity values - a numerator and a denominator
<Ratio> EXTENDS @<DataType> CLOSED {   

    a [fhir:Ratio];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:numerator @<Ratio.numerator>?;     # Numerator value
    fhir:denominator @<Ratio.denominator>?;  # Denominator value
} AND (

# Constraint: UniqueKey:rat-1
# Human readable:Numerator and denominator SHALL both be present, or both are absent. If both are absent, there SHALL be some extension present
# XPath:(count(f:numerator) = count(f:denominator)) and ((count(f:numerator) > 0) or (count(f:extension) > 0))
# Constraint:(numerator.empty() xor denominator.exists()) and (numerator.exists() or extension.exists())
# ShEx:

(( NOT { fhir:numerator {fhir:v .} }  AND NOT  { fhir:denominator . }) OR ( NOT  NOT { fhir:numerator {fhir:v .} }  AND  { fhir:denominator . })) AND ({ fhir:numerator . } OR { fhir:extension . })

)
 

# A length of time
<Duration> EXTENDS @<Quantity> CLOSED {   

    a [fhir:Duration];
    fhir:nodeRole [fhir:treeRoot]?;
} AND (

# Constraint: UniqueKey:drt-1
# Human readable:There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.
# XPath:(f:code or not(f:value)) and (not(exists(f:system)) or f:system/@value='http://unitsofmeasure.org')
# Constraint:code.exists() implies ((system = %ucum) and value.exists())
# ShEx:

{ fhir:code . } AND (({ fhir:system { fhir:v ['http://unitsofmeasure.org'] }  }) AND { fhir:value . })

)
 

# Primitive Type integer
<integer> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:integer];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<integer.value>?;               # Primitive value for integer
}  

# Set of values bounded by low and high
<Range> EXTENDS @<DataType> CLOSED {   

    a [fhir:Range];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:low @<Range.low>?;                 # Low limit
    fhir:high @<Range.high>?;               # High limit
} AND (

# Constraint: UniqueKey:rng-2
# Human readable:If present, low SHALL have a lower value than high
# XPath:not(exists(f:low/f:value/@value)) or not(exists(f:high/f:value/@value)) or (number(f:low/f:value/@value) <= number(f:high/f:value/@value))
# Constraint:low.value.empty() or high.value.empty() or (low <= high)
# ShEx:

 NOT { fhir:low fhir:value {fhir:v .} }  OR  NOT { fhir:high fhir:value {fhir:v .} }  OR ({ fhir:low { fhir:v MaxInclusive { fhir:high } }  })

)
 

# Concept - reference to a terminology or just  text
<CodeableConcept> EXTENDS @<DataType> CLOSED {   

    a [fhir:CodeableConcept];
    fhir:nodeRole [fhir:treeRoot]?;
    a NONLITERAL*;
    fhir:coding @<OneOrMore_CodeableConcept.coding>?;  # Code defined by a terminology 
                                            # system 
    fhir:text @<CodeableConcept.text>?;     # Plain text representation of the 
                                            # concept 
}  

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_Goal.identifier> CLOSED {
    rdf:first @<Goal.identifier>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Goal.identifier> 
}

<OneOrMore_Goal.category> CLOSED {
    rdf:first @<Goal.category>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Goal.category> 
}

<OneOrMore_Goal.target> CLOSED {
    rdf:first @<Goal.target>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Goal.target> 
}

<OneOrMore_Goal.addresses_Condition_OR_MedicationRequest_OR_MedicationUsage_OR_NutritionOrder_OR_Observation_OR_RiskAssessment_OR_ServiceRequest> CLOSED {
    rdf:first @<Goal.addresses> AND {fhir:link 
			@<Condition> OR 
			@<MedicationRequest> OR 
			@<MedicationUsage> OR 
			@<NutritionOrder> OR 
			@<Observation> OR 
			@<RiskAssessment> OR 
			@<ServiceRequest> } ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Goal.addresses_Condition_OR_MedicationRequest_OR_MedicationUsage_OR_NutritionOrder_OR_Observation_OR_RiskAssessment_OR_ServiceRequest> 
}

<OneOrMore_Goal.note> CLOSED {
    rdf:first @<Goal.note>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Goal.note> 
}

<OneOrMore_Goal.outcome> CLOSED {
    rdf:first @<Goal.outcome>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Goal.outcome> 
}

<OneOrMore_CodeableConcept.coding> CLOSED {
    rdf:first @<CodeableConcept.coding>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CodeableConcept.coding> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
