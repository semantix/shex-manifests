PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


start=@<Ingredient> AND {fhir:nodeRole [fhir:treeRoot]}


# An ingredient of a manufactured item or pharmaceutical product
<Ingredient> EXTENDS @<DomainResource> CLOSED {   

    a [fhir:Ingredient];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:identifier @<Ingredient.identifier>?;  # An identifier or code by which the 
                                            # ingredient can be referenced 
    fhir:status @<Ingredient.status>;       # draft | active | retired | unknown
    fhir:for @<OneOrMore_Ingredient.for_AdministrableProductDefinition_OR_ManufacturedItemDefinition_OR_MedicinalProductDefinition>?;  # The product which this ingredient 
                                            # is a constituent part of 
    fhir:role @<Ingredient.role>;           # Purpose of the ingredient within 
                                            # the product, e.g. active, inactive 
    fhir:function @<OneOrMore_Ingredient.function>?;  # Precise action within the drug 
                                            # product, e.g. antioxidant, 
                                            # alkalizing agent 
    fhir:group @<Ingredient.group>?;        # A classification of the ingredient 
                                            # according to where in the physical 
                                            # item it tends to be used, such the 
                                            # outer shell of a tablet, inner 
                                            # body or ink 
    fhir:allergenicIndicator @<Ingredient.allergenicIndicator>?;  # If the ingredient is a known or 
                                            # suspected allergen 
    fhir:manufacturer @<OneOrMore_Ingredient.manufacturer>?;  # An organization that manufactures 
                                            # this ingredient 
    fhir:substance @<Ingredient.substance>;  # The substance that comprises this 
                                            # ingredient 
} AND (

# Constraint: UniqueKey:ing-1
# Human readable:If an ingredient is noted as an allergen (allergenicIndicator) then its substance should be a code. If the substance is a SubstanceDefinition, then the allegen information should be documented in that resource
# XPath:count(f:Ingredient.f:allergenicIndicator[@value='true']|f:Ingredient.f:substance.f:code.f:reference) < 2
# Constraint:(Ingredient.allergenicIndicator.where(value='true').count() + Ingredient.substance.code.reference.count())  < 2
# ShEx:

( count( fhir:Ingredient fhir:allergenicIndicator  SHEX_where_SHEX (fhir:value { fhir:v ['true'] } ) ) SHEX_Plus_SHEX  count( fhir:Ingredient fhir:substance fhir:code fhir:reference )) { fhir:v MaxExclusive 2 } 

)
 

# The quantity of substance, per presentation, or per volume or mass, and type of quantity
<Ingredient.substance.strength> EXTENDS @<BackboneElement> CLOSED {   
    fhir:presentation (@<Ratio>  OR 
    			@<RatioRange>  OR 
    			@<CodeableConcept>  OR 
    			@<Quantity> )  AND { rdf:type IRI } ?;  # The quantity of substance in the 
                                            # unit of presentation 
    fhir:textPresentation @<Ingredient.substance.strength.textPresentation>?;  # Text of either the whole 
                                            # presentation strength or a part of 
                                            # it (rest being in 
                                            # Strength.presentation as a ratio) 
    fhir:concentration (@<Ratio>  OR 
    			@<RatioRange>  OR 
    			@<CodeableConcept>  OR 
    			@<Quantity> )  AND { rdf:type IRI } ?;  # The strength per unitary volume 
                                            # (or mass) 
    fhir:textConcentration @<Ingredient.substance.strength.textConcentration>?;  # Text of either the whole 
                                            # concentration strength or a part 
                                            # of it (rest being in 
                                            # Strength.concentration as a ratio) 
    fhir:basis @<Ingredient.substance.strength.basis>?;  # A code that indicates if the 
                                            # strength is, for example, based on 
                                            # the ingredient substance as stated 
                                            # or on the substance base (when the 
                                            # ingredient is a salt) 
    fhir:measurementPoint @<Ingredient.substance.strength.measurementPoint>?;  # When strength is measured at a 
                                            # particular point or distance 
    fhir:country @<OneOrMore_Ingredient.substance.strength.country>?;  # Where the strength range applies
    fhir:referenceStrength @<OneOrMore_Ingredient.substance.strength.referenceStrength>?;  # Strength expressed in terms of a 
                                            # reference substance 
}  

# The substance that comprises this ingredient
<Ingredient.substance> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<Ingredient.substance.code>;  # A code or full resource that 
                                            # represents the ingredient 
                                            # substance 
    fhir:strength @<OneOrMore_Ingredient.substance.strength>?;  # The quantity of substance, per 
                                            # presentation, or per volume or 
                                            # mass, and type of quantity 
}  

# An organization that manufactures this ingredient
<Ingredient.manufacturer> EXTENDS @<BackboneElement> CLOSED {   
    fhir:role @<Ingredient.manufacturer.role>?;  # allowed | possible | actual
    fhir:manufacturer @<Ingredient.manufacturer.manufacturer> AND {fhir:link 
    			@<Organization> };  # An organization that manufactures 
                                            # this ingredient 
}  

# Strength expressed in terms of a reference substance
<Ingredient.substance.strength.referenceStrength> EXTENDS @<BackboneElement> CLOSED {   
    fhir:substance @<Ingredient.substance.strength.referenceStrength.substance>?;  # Relevant reference substance
    fhir:strength (@<Ratio>  OR 
    			@<RatioRange>  OR 
    			@<Quantity> )  AND { rdf:type IRI } ;  # Strength expressed in terms of a 
                                            # reference substance 
    fhir:measurementPoint @<Ingredient.substance.strength.referenceStrength.measurementPoint>?;  # When strength is measured at a 
                                            # particular point or distance 
    fhir:country @<OneOrMore_Ingredient.substance.strength.referenceStrength.country>?;  # Where the strength range applies
}  

#---------------------- Data Types -------------------

# Range of ratio values
<RatioRange> EXTENDS @<DataType> CLOSED {   

    a [fhir:RatioRange];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:lowNumerator @<RatioRange.lowNumerator>?;  # Low Numerator limit
    fhir:highNumerator @<RatioRange.highNumerator>?;  # High Numerator limit
    fhir:denominator @<RatioRange.denominator>?;  # Denominator value
} AND (

# Constraint: UniqueKey:inv-2
# Human readable:If present, lowNumerator SHALL have a lower value than highNumerator
# XPath:not(exists(f:lowNumerator/f:value/@value)) or not(exists(f:highNumerator/f:value/@value)) or (number(f:lowNumerator/f:value/@value) <= number(f:highNumerator/f:value/@value))
# Constraint:lowNumerator.empty() or highNumerator.empty() or (lowNumerator <= highNumerator)
# ShEx:

 NOT { fhir:lowNumerator {fhir:v .} }  OR  NOT { fhir:highNumerator {fhir:v .} }  OR ({ fhir:lowNumerator { fhir:v MaxInclusive { fhir:highNumerator } }  })

) AND (

# Constraint: UniqueKey:inv-1
# Human readable:One of lowNumerator or highNumerator and denominator SHALL be present, or all are absent. If all are absent, there SHALL be some extension present
# XPath:(count(f:numerator) = count(f:denominator)) and ((count(f:numerator) > 0) or (count(f:extension) > 0))
# Constraint:((lowNumerator.empty() and highNumerator.empty()) xor denominator.exists()) and (lowNumerator.exists() or extension.exists())
# ShEx:

((( NOT { fhir:lowNumerator {fhir:v .} }  AND  NOT { fhir:highNumerator {fhir:v .} } ) AND NOT  { fhir:denominator . }) OR ( NOT ( NOT { fhir:lowNumerator {fhir:v .} }  AND  NOT { fhir:highNumerator {fhir:v .} } ) AND  { fhir:denominator . })) AND ({ fhir:lowNumerator . } OR { fhir:extension . })

)
 

# A measured or measurable amount
<Quantity> EXTENDS @<DataType> CLOSED {   

    a [fhir:Quantity];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:value @<Quantity.value>?;          # Numerical value (with implicit 
                                            # precision) 
    fhir:comparator @<Quantity.comparator>?;  # < | <= | >= | > | ad - how to 
                                            # understand the value 
    fhir:unit @<Quantity.unit>?;            # Unit representation
    fhir:system @<Quantity.system>?;        # System that defines coded unit form
    fhir:code @<Quantity.code>?;            # Coded form of the unit
} AND (

# Constraint: UniqueKey:qty-3
# Human readable:If a code for the unit is present, the system SHALL also be present
# XPath:not(exists(f:code)) or exists(f:system)
# Constraint:code.empty() or system.exists()
# ShEx:

 NOT { fhir:code {fhir:v .} }  OR { fhir:system . }

)
 

# A ratio of two Quantity values - a numerator and a denominator
<Ratio> EXTENDS @<DataType> CLOSED {   

    a [fhir:Ratio];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:numerator @<Ratio.numerator>?;     # Numerator value
    fhir:denominator @<Ratio.denominator>?;  # Denominator value
} AND (

# Constraint: UniqueKey:rat-1
# Human readable:Numerator and denominator SHALL both be present, or both are absent. If both are absent, there SHALL be some extension present
# XPath:(count(f:numerator) = count(f:denominator)) and ((count(f:numerator) > 0) or (count(f:extension) > 0))
# Constraint:(numerator.empty() xor denominator.exists()) and (numerator.exists() or extension.exists())
# ShEx:

(( NOT { fhir:numerator {fhir:v .} }  AND NOT  { fhir:denominator . }) OR ( NOT  NOT { fhir:numerator {fhir:v .} }  AND  { fhir:denominator . })) AND ({ fhir:numerator . } OR { fhir:extension . })

)
 

# Concept - reference to a terminology or just  text
<CodeableConcept> EXTENDS @<DataType> CLOSED {   

    a [fhir:CodeableConcept];
    fhir:nodeRole [fhir:treeRoot]?;
    a NONLITERAL*;
    fhir:coding @<OneOrMore_CodeableConcept.coding>?;  # Code defined by a terminology 
                                            # system 
    fhir:text @<CodeableConcept.text>?;     # Plain text representation of the 
                                            # concept 
}  

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_Ingredient.for_AdministrableProductDefinition_OR_ManufacturedItemDefinition_OR_MedicinalProductDefinition> CLOSED {
    rdf:first @<Ingredient.for> AND {fhir:link 
			@<AdministrableProductDefinition> OR 
			@<ManufacturedItemDefinition> OR 
			@<MedicinalProductDefinition> } ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Ingredient.for_AdministrableProductDefinition_OR_ManufacturedItemDefinition_OR_MedicinalProductDefinition> 
}

<OneOrMore_Ingredient.function> CLOSED {
    rdf:first @<Ingredient.function>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Ingredient.function> 
}

<OneOrMore_Ingredient.manufacturer> CLOSED {
    rdf:first @<Ingredient.manufacturer>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Ingredient.manufacturer> 
}

<OneOrMore_Ingredient.substance.strength.country> CLOSED {
    rdf:first @<Ingredient.substance.strength.country>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Ingredient.substance.strength.country> 
}

<OneOrMore_Ingredient.substance.strength.referenceStrength> CLOSED {
    rdf:first @<Ingredient.substance.strength.referenceStrength>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Ingredient.substance.strength.referenceStrength> 
}

<OneOrMore_Ingredient.substance.strength> CLOSED {
    rdf:first @<Ingredient.substance.strength>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Ingredient.substance.strength> 
}

<OneOrMore_Ingredient.substance.strength.referenceStrength.country> CLOSED {
    rdf:first @<Ingredient.substance.strength.referenceStrength.country>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Ingredient.substance.strength.referenceStrength.country> 
}

<OneOrMore_CodeableConcept.coding> CLOSED {
    rdf:first @<CodeableConcept.coding>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CodeableConcept.coding> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
