PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
BASE <http://hl7.org/fhir/shape/>


start=@<FamilyMemberHistory> AND {fhir:nodeRole [fhir:treeRoot]}


# Information about patient's relatives, relevant for patient
<FamilyMemberHistory> EXTENDS @<DomainResource> CLOSED {   

    a [fhir:FamilyMemberHistory];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:identifier @<OneOrMore_FamilyMemberHistory.identifier>?;  # External Id(s) for this record
    fhir:instantiatesCanonical @<OneOrMore_FamilyMemberHistory.instantiatesCanonical>?;  # Instantiates FHIR protocol or 
                                            # definition 
    fhir:instantiatesUri @<OneOrMore_FamilyMemberHistory.instantiatesUri>?;  # Instantiates external protocol or 
                                            # definition 
    fhir:status @<FamilyMemberHistory.status>;  # partial | completed | 
                                            # entered-in-error | health-unknown 
    fhir:dataAbsentReason @<FamilyMemberHistory.dataAbsentReason>?;  # subject-unknown | withheld | 
                                            # unable-to-obtain | deferred 
    fhir:patient @<FamilyMemberHistory.patient> AND {fhir:link 
    			@<Patient> };  # Patient history is about
    fhir:date @<FamilyMemberHistory.date>?;  # When history was recorded or last 
                                            # updated 
    fhir:name @<FamilyMemberHistory.name>?;  # The family member described
    fhir:relationship @<FamilyMemberHistory.relationship>;  # Relationship to the subject
    fhir:sex @<FamilyMemberHistory.sex>?;   # male | female | other | unknown
    fhir:born (@<Period>  OR 
    			@<date>  OR 
    			@<string> )  AND { rdf:type IRI } ?;  # (approximate) date of birth
    fhir:age (@<Age>  OR 
    			@<Range>  OR 
    			@<string> )  AND { rdf:type IRI } ?;  # (approximate) age
    fhir:estimatedAge @<FamilyMemberHistory.estimatedAge>?;  # Age is estimated?
    fhir:deceased (@<boolean>  OR 
    			@<Age>  OR 
    			@<Range>  OR 
    			@<date>  OR 
    			@<string> )  AND { rdf:type IRI } ?;  # Dead? How old/when?
    fhir:reason @<OneOrMore_FamilyMemberHistory.reason>?;  # Why was family member history 
                                            # performed? 
    fhir:note @<OneOrMore_FamilyMemberHistory.note>?;  # General note about related person
    fhir:condition @<OneOrMore_FamilyMemberHistory.condition>?;  # Condition that the related person 
                                            # had 
    fhir:procedure @<OneOrMore_FamilyMemberHistory.procedure>?;  # Procedures that the related person 
                                            # had 
} AND (

# Constraint: UniqueKey:fhs-2
# Human readable:Can only have estimatedAge if age[x] is present
# XPath:exists(*[starts-with(local-name(.), 'age')]) or not(exists(f:estimatedAge))
# Constraint:age.exists() or estimatedAge.empty()
# ShEx:

{ fhir:age . } OR  NOT { fhir:estimatedAge {fhir:v .} } 

) AND (

# Constraint: UniqueKey:fhs-1
# Human readable:Can have age[x] or born[x], but not both
# XPath:not (*[starts-with(local-name(.), 'age')] and *[starts-with(local-name(.), 'birth')])
# Constraint:age.empty() or born.empty()
# ShEx:

 NOT { fhir:age {fhir:v .} }  OR  NOT { fhir:born {fhir:v .} } 

)
 

# Condition that the related person had
<FamilyMemberHistory.condition> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<FamilyMemberHistory.condition.code>;  # Condition suffered by relation
    fhir:outcome @<FamilyMemberHistory.condition.outcome>?;  # deceased | permanent disability | 
                                            # etc. 
    fhir:contributedToDeath @<FamilyMemberHistory.condition.contributedToDeath>?;  # Whether the condition contributed 
                                            # to the cause of death 
    fhir:onset (@<Age>  OR 
    			@<Range>  OR 
    			@<Period>  OR 
    			@<string> )  AND { rdf:type IRI } ?;  # When condition first manifested
    fhir:note @<OneOrMore_FamilyMemberHistory.condition.note>?;  # Extra information about condition
}  

# Procedures that the related person had
<FamilyMemberHistory.procedure> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<FamilyMemberHistory.procedure.code>;  # Procedures performed on the 
                                            # related person 
    fhir:outcome @<FamilyMemberHistory.procedure.outcome>?;  # What happened following the 
                                            # procedure 
    fhir:contributedToDeath @<FamilyMemberHistory.procedure.contributedToDeath>?;  # Whether the procedure contributed 
                                            # to the cause of death 
    fhir:performed (@<Age>  OR 
    			@<Range>  OR 
    			@<Period>  OR 
    			@<string>  OR 
    			@<dateTime> )  AND { rdf:type IRI } ?;  # When the procedure was performed
    fhir:note @<OneOrMore_FamilyMemberHistory.procedure.note>?;  # Extra information about the 
                                            # procedure 
}  

#---------------------- Data Types -------------------

# Primitive Type date
<date> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:date];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<date.value>?;                  # Primitive value for date
}  

# Primitive Type dateTime
<dateTime> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:dateTime];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<dateTime.value>?;              # Primitive value for dateTime
}  

# Primitive Type boolean
<boolean> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:boolean];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<boolean.value>?;               # Primitive value for boolean
}  

# Primitive Type string
<string> EXTENDS @<PrimitiveType> CLOSED {   

    a [fhir:string];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:v @<string.value>?;                # Primitive value for string
}  

# Time range defined by start and end date/time
<Period> EXTENDS @<DataType> CLOSED {   

    a [fhir:Period];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:start @<Period.start>?;            # Starting time with inclusive 
                                            # boundary 
    fhir:end @<Period.end>?;                # End time with inclusive boundary, 
                                            # if not ongoing 
} AND (

# Constraint: UniqueKey:per-1
# Human readable:If present, start SHALL have a lower or equal value than end
# XPath:not(exists(f:start/@value)) or not(exists(f:end/@value)) or (xs:dateTime(f:start/@value) <= xs:dateTime(f:end/@value))
# Constraint:start.hasValue().not() or end.hasValue().not() or (start <= end)
# ShEx:

 NOT { fhir:start  . } OR  NOT { fhir:end  . } OR ({ fhir:start { fhir:v MaxInclusive { fhir:end } }  })

)
 

# Set of values bounded by low and high
<Range> EXTENDS @<DataType> CLOSED {   

    a [fhir:Range];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:low @<Range.low>?;                 # Low limit
    fhir:high @<Range.high>?;               # High limit
} AND (

# Constraint: UniqueKey:rng-2
# Human readable:If present, low SHALL have a lower value than high
# XPath:not(exists(f:low/f:value/@value)) or not(exists(f:high/f:value/@value)) or (number(f:low/f:value/@value) <= number(f:high/f:value/@value))
# Constraint:low.value.empty() or high.value.empty() or (low <= high)
# ShEx:

 NOT { fhir:low fhir:value {fhir:v .} }  OR  NOT { fhir:high fhir:value {fhir:v .} }  OR ({ fhir:low { fhir:v MaxInclusive { fhir:high } }  })

)
 

# A duration of time during which an organism (or a process) has existed
<Age> EXTENDS @<Quantity> CLOSED {   

    a [fhir:Age];
    fhir:nodeRole [fhir:treeRoot]?;
} AND (

# Constraint: UniqueKey:age-1
# Human readable:There SHALL be a code if there is a value and it SHALL be an expression of time.  If system is present, it SHALL be UCUM.  If value is present, it SHALL be positive.
# XPath:(f:code or not(f:value)) and (not(exists(f:system)) or f:system/@value='http://unitsofmeasure.org') and (not(f:value/@value) or f:value/@value >=0)
# Constraint:(code.exists() or value.empty()) and (system.empty() or system = %ucum) and (value.empty() or value.hasValue().not() or value > 0)
# ShEx:

({ fhir:code . } OR  NOT { fhir:value {fhir:v .} } ) AND ( NOT { fhir:system {fhir:v .} }  OR ({ fhir:system { fhir:v ['http://unitsofmeasure.org'] }  })) AND ( NOT { fhir:value {fhir:v .} }  OR  NOT { fhir:value  . } OR ({ fhir:value { fhir:v MinExclusive 0 }  }))

)
 

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_FamilyMemberHistory.identifier> CLOSED {
    rdf:first @<FamilyMemberHistory.identifier>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.identifier> 
}

<OneOrMore_FamilyMemberHistory.instantiatesCanonical> CLOSED {
    rdf:first @<FamilyMemberHistory.instantiatesCanonical>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.instantiatesCanonical> 
}

<OneOrMore_FamilyMemberHistory.instantiatesUri> CLOSED {
    rdf:first @<FamilyMemberHistory.instantiatesUri>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.instantiatesUri> 
}

<OneOrMore_FamilyMemberHistory.reason> CLOSED {
    rdf:first @<FamilyMemberHistory.reason>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.reason> 
}

<OneOrMore_FamilyMemberHistory.note> CLOSED {
    rdf:first @<FamilyMemberHistory.note>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.note> 
}

<OneOrMore_FamilyMemberHistory.condition> CLOSED {
    rdf:first @<FamilyMemberHistory.condition>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.condition> 
}

<OneOrMore_FamilyMemberHistory.procedure> CLOSED {
    rdf:first @<FamilyMemberHistory.procedure>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.procedure> 
}

<OneOrMore_FamilyMemberHistory.condition.note> CLOSED {
    rdf:first @<FamilyMemberHistory.condition.note>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.condition.note> 
}

<OneOrMore_FamilyMemberHistory.procedure.note> CLOSED {
    rdf:first @<FamilyMemberHistory.procedure.note>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_FamilyMemberHistory.procedure.note> 
}

#---------------------- Reference Types -------------------

#---------------------- Value Sets ------------------------
